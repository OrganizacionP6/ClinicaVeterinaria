name: CI/CD - ClinicaVeterinaria

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      # Paso 1: Clonar el repositorio
      - name: Checkout code
        uses: actions/checkout@v3

      # Paso 2: Configurar JDK
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      # Paso 3: Cachear dependencias Maven
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: maven-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-${{ runner.os }}

      # Paso 4: Compilar el proyecto
      - name: Compile with Maven
        run: mvn clean compile

      # Paso 5: Ejecutar tests
      - name: Run Tests
        run: mvn test

  dockerize-and-deploy:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      # Paso 1: Clonar el repositorio
      - name: Checkout code
        uses: actions/checkout@v3

      # Paso 2: Configurar Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.MY_CLINIC_PAT }}

      # Paso 3: Construir y publicar las im√°genes Docker
      - name: Build and Push Backend Image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ghcr.io/organizacionp6/clinica-backend:latest

      - name: Build and Push Frontend Image
        uses: docker/build-push-action@v6
        with:
          context: ./pet-clinic-front
          file: Dockerfile
          push: true
          tags: ghcr.io/organizacionp6/clinica-frontend:latest

      # Paso 4: Validar docker-compose
      - name: Test docker-compose
        run: docker-compose up --build --exit-code-from backend
